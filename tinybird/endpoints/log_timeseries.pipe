TOKEN read_pipes READ

NODE day_intervals
SQL >

    %
    WITH
        toStartOfDay(toDateTime64({{ DateTime(start_date) }}, 3),
            {{ String(timezone, 'UTC') }}) AS start,
        toStartOfDay(toDateTime64({{ DateTime(end_date) }}, 3),
            {{ String(timezone, 'UTC') }}) AS end
    SELECT
        arrayJoin(
            arrayMap(
                x -> toDateTime64(toStartOfDay(toDateTime64(x, 3)), 3),
                range(toUInt32(start + 86400), toUInt32(end + 86400),
                86400
            )
        )
    ) as date


NODE hour_intervals
SQL >

    %
    WITH
        toStartOfHour(toDateTime64({{ DateTime(start_date) }}, 3),
            {{ String(timezone, 'UTC') }}) AS start,
        toStartOfHour(toDateTime64({{ DateTime(end_date) }}, 3),
            {{ String(timezone, 'UTC') }}) AS end
    SELECT
        arrayJoin(
            arrayMap(x -> toDateTime64(x, 3), range(toUInt32(start + 3600), toUInt32(end + 3600), 3600)
        )
    ) as date


NODE minute_intervals
SQL >
    %
    WITH
        toStartOfMinute(toDateTime64({{ DateTime(start_date) }}, 3),
            {{ String(timezone, 'UTC') }}) AS start,
        toStartOfMinute(toDateTime64({{ DateTime(end_date) }}, 3),
            {{ String(timezone, 'UTC') }}) AS end
    SELECT
        arrayJoin(
            arrayMap(x -> toDateTime64(x, 3), range(toUInt32(start + 60), toUInt32(end + 60), 60)
        )
    ) as date


NODE error_monitoring_node
SQL >
    %
    SELECT
        {% if date_diff_in_hours(start_date, end_date) > 24 * 7 %}
            toStartOfDay(timestamp) as date,
        {% elif date_diff_in_hours(start_date, end_date) > 1 %}
            toStartOfHour(timestamp) as date,
        {% else %}
            toStartOfMinute(timestamp) as date,
        {% end %}
        countIf(level = 'ERROR') as error_count,
        countIf(level != 'ERROR') as total_requests,
        round(countIf(level = 'ERROR') * 100.0 / count(), 2) as error_rate,
        round(avg(response_time), 2) as avg_response_time,
        round(max(response_time), 2) as max_response_time
    FROM logs
    WHERE 1=1
        AND timestamp >= {{DateTime(start_date)}}
        AND timestamp <= {{DateTime(end_date)}}
    {% if defined(service) and service != [''] %}
        AND service in {{Array(service)}}
    {% end %}
    {% if defined(level) and level != [''] %}
        AND level in {{Array(level)}}
    {% end %}
    {% if defined(environment) and environment != [''] %}
        AND environment in {{Array(environment)}}
    {% end %}
    {% if defined(request_method) and request_method != [''] %}
        AND request_method in {{Array(request_method)}}
    {% end %}
    {% if defined(status_code) and status_code != [''] %}
        AND status_code in {{Array(status_code)}}
    {% end %}
    {% if defined(request_path) and request_path != [''] %}
        AND request_path in {{Array(request_path)}}
    {% end %}
    {% if defined(user_agent) and user_agent != [''] %}
        AND user_agent in {{Array(user_agent)}}
    {% end %}
    {% if defined(message) and message != '' %}
        AND message like concat('%', {{String(message)}}, '%')
    {% end %}
    GROUP BY date
    ORDER BY date ASC


NODE endpoint
SQL >
    %
    {% if not defined(start_date) %}
      {{ error('start_date (DateTime) query param is required') }}
    {% end %}
    {% if not defined(end_date) %}
      {{ error('end_date (DateTime) query param is required') }}
    {% end %}
    SELECT
        date,
        error_count,
        total_requests,
        error_rate,
        avg_response_time,
        max_response_time
    FROM
    {% if date_diff_in_hours(start_date, end_date) > 24 * 7 %}
        day_intervals
    {% elif date_diff_in_hours(start_date, end_date) > 1 %}
        hour_intervals
    {% else %}
        minute_intervals
    {% end %}
    LEFT JOIN error_monitoring_node
    USING date


TYPE endpoint
        